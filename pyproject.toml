[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "frappe-linter-template"
version = "0.1.0"
description = "A comprehensive template repository for Frappe-based projects with pre-configured linting, formatting, and code quality tools"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Dhwani Rural Information Systems", email = "info@dhwani.org"}
]
maintainers = [
    {name = "Dhwani Rural Information Systems", email = "info@dhwani.org"}
]
keywords = ["frappe", "template", "linting", "pre-commit", "code-quality", "ci-cd", "development-tools"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Documentation",
    "Framework :: Frappe",
]
requires-python = ">=3.8"
dependencies = [
    "pre-commit>=3.0.0",
    "frappe>=14.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.8.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pip-audit>=7.0.0",
    "semgrep>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pip-audit>=7.0.0",
    "semgrep>=1.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/dhwani-rural/frappe-linter-template"
Documentation = "https://github.com/dhwani-rural/frappe-linter-template#readme"
Repository = "https://github.com/dhwani-rural/frappe-linter-template.git"
"Bug Tracker" = "https://github.com/dhwani-rural/frappe-linter-template/issues"
"Discussions" = "https://github.com/dhwani-rural/frappe-linter-template/discussions"
"CI/CD" = "https://github.com/dhwani-rural/frappe-linter-template/actions"

[project.scripts]
setup-frappe-app = "scripts.setup_frappe_app:main"

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "Q",  # flake8-quotes
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "LOG", # flake8-logging-format
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "TRY", # tryceratops
    "NPY", # numpy
    "AIR", # flake8-airflow
    "PERF", # perflint
    "FURB", # refurb
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR0912", # too many branches
    "PLR0911", # too many return statements
    "PLR2004", # magic value used in comparison
    "PLR0916", # too many boolean expressions
    "PLR0917", # too many positional arguments
    "PLR0918", # too many boolean expressions
    "PLR0919", # too many boolean expressions
    "PLR0920", # too many boolean expressions
    "PLR0921", # too many boolean expressions
    "PLR0922", # too many boolean expressions
    "PLR0923", # too many boolean expressions
    "PLR0924", # too many boolean expressions
    "PLR0925", # too many boolean expressions
    "PLR0926", # too many boolean expressions
    "PLR0927", # too many boolean expressions
    "PLR0928", # too many boolean expressions
    "PLR0929", # too many boolean expressions
    "PLR0930", # too many boolean expressions
    "PLR0931", # too many boolean expressions
    "PLR0932", # too many boolean expressions
    "PLR0933", # too many boolean expressions
    "PLR0934", # too many boolean expressions
    "PLR0935", # too many boolean expressions
    "PLR0936", # too many boolean expressions
    "PLR0937", # too many boolean expressions
    "PLR0938", # too many boolean expressions
    "PLR0939", # too many boolean expressions
    "PLR0940", # too many boolean expressions
    "PLR0941", # too many boolean expressions
    "PLR0942", # too many boolean expressions
    "PLR0943", # too many boolean expressions
    "PLR0944", # too many boolean expressions
    "PLR0945", # too many boolean expressions
    "PLR0946", # too many boolean expressions
    "PLR0947", # too many boolean expressions
    "PLR0948", # too many boolean expressions
    "PLR0949", # too many boolean expressions
    "PLR0950", # too many boolean expressions
    "PLR0951", # too many boolean expressions
    "PLR0952", # too many boolean expressions
    "PLR0953", # too many boolean expressions
    "PLR0954", # too many boolean expressions
    "PLR0955", # too many boolean expressions
    "PLR0956", # too many boolean expressions
    "PLR0957", # too many boolean expressions
    "PLR0958", # too many boolean expressions
    "PLR0959", # too many boolean expressions
    "PLR0960", # too many boolean expressions
    "PLR0961", # too many boolean expressions
    "PLR0962", # too many boolean expressions
    "PLR0963", # too many boolean expressions
    "PLR0964", # too many boolean expressions
    "PLR0965", # too many boolean expressions
    "PLR0966", # too many boolean expressions
    "PLR0967", # too many boolean expressions
    "PLR0968", # too many boolean expressions
    "PLR0969", # too many boolean expressions
    "PLR0970", # too many boolean expressions
    "PLR0971", # too many boolean expressions
    "PLR0972", # too many boolean expressions
    "PLR0973", # too many boolean expressions
    "PLR0974", # too many boolean expressions
    "PLR0975", # too many boolean expressions
    "PLR0976", # too many boolean expressions
    "PLR0977", # too many boolean expressions
    "PLR0978", # too many boolean expressions
    "PLR0979", # too many boolean expressions
    "PLR0980", # too many boolean expressions
    "PLR0981", # too many boolean expressions
    "PLR0982", # too many boolean expressions
    "PLR0983", # too many boolean expressions
    "PLR0984", # too many boolean expressions
    "PLR0985", # too many boolean expressions
    "PLR0986", # too many boolean expressions
    "PLR0987", # too many boolean expressions
    "PLR0988", # too many boolean expressions
    "PLR0989", # too many boolean expressions
    "PLR0990", # too many boolean expressions
    "PLR0991", # too many boolean expressions
    "PLR0992", # too many boolean expressions
    "PLR0993", # too many boolean expressions
    "PLR0994", # too many boolean expressions
    "PLR0995", # too many boolean expressions
    "PLR0996", # too many boolean expressions
    "PLR0997", # too many boolean expressions
    "PLR0998", # too many boolean expressions
    "PLR0999", # too many boolean expressions
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "PLR2004"]
"scripts/**/*" = ["PLR0913", "PLR0915"]
"docs/**/*" = ["E501", "F401"]

[tool.ruff.isort]
known-first-party = ["frappe_linter_template"]
known-third-party = ["frappe", "pytest", "ruff", "black", "prettier", "eslint"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
target-version = ['py38']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | node_modules
  | sites
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config --cov=frappe_linter_template --cov-report=term-missing --cov-report=html --cov-report=xml"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["frappe_linter_template"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/sites/*",
    "*/build/*",
    "*/dist/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "def main\\(\\):",
    "if __name__ == ['\"]__main__['\"]:",
]

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts"]
skips = ["B101", "B601"]

[tool.safety]
output = "json"
full_report = true 